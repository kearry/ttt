// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?   // Explicitly add this field
  role          String?   @default("USER")
  accounts       Account[]
  sessions       Session[]
  gamesAsPlayerX Game[]    @relation("PlayerX")
  gamesAsPlayerO Game[]    @relation("PlayerO")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id        String   @id @default(cuid())
  playerXId String
  playerOId String?
  playerX   User     @relation("PlayerX", fields: [playerXId], references: [id])
  playerO   User?    @relation("PlayerO", fields: [playerOId], references: [id])
  board     String   @default("000000000") // Represents the 3x3 board state
  status    String   @default("ONGOING") // ONGOING, PLAYER_X_WON, PLAYER_O_WON, DRAW
  winner    String?
  moves     Move[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Move {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player    String   // "X" or "O"
  position  Int      // 0-8 for the 3x3 grid
  createdAt DateTime @default(now())
}